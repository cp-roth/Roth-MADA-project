---
title: "Cleaning and Processing"
author: "Cassia Roth"
date: "`r Sys.Date()`"
output: html_document
---

Please note I used ChatGPT and CoPilot throughout to help troubleshoot code.

# Processing script

This contains the same code and comments/information as `processingcode.R`. This quarto file does not pull code from the R script but rather includes it directly.

# Setup

Load needed packages. Make sure they are installed.

```{r}
library(readxl) #for loading Excel files
library(tidyverse) #for data processing/cleaning
library(skimr) #for nice visualization of data 
library(here) #to set paths
library(renv) #for package management
library(knitr) #for nice tables
library(kableExtra) #for nice tables
rm(list=ls()) #clear the environment
```

# Data loading

Note that for functions that come from specific packages (instead of base R), you can specify both package and function: `package::function()`. Although not required, specifying the package makes it clearer where the function is coming from. This text is adapted from Dr. Andreas Handel.

```{r}
# path to data
# note the use of the here() package and not absolute paths
data_location <- here::here("data","raw-data","MaternidadeLaranjeiras.csv")
ML_raw <- read_csv(data_location)

# Structure of Data
glimpse(ML_raw)
```

From this initial read, we can see that the data have 2845 observations and 23 variables. The variables are characterized as character and numerical.

# Check data

First we can look at the Codebook and practice table making.
```{r}
# Path to codebook
codebook_location <- here::here("data", "raw-data", "Codebook.csv")
codebook <- read_csv(codebook_location)

# Display the structure of the data frame
str(codebook)

# Display the first few rows of the data frame
head(codebook)

# Create table
codebook_table <- kable(codebook, caption = "Codebook") %>% kable_styling()

#Print table
print(codebook_table)
```

# Explore data

There are several ways of looking at the data. This code comes from Dr. Andreas Handel.

```{r}
# Looking at the data
dplyr::glimpse(ML_raw)
summary(ML_raw)
head(ML_raw)
skimr::skim(ML_raw)
```

# Clean data

I created this dataset from published clinical notes from a specific maternity hospital in Rio de Janeiro, Brazil for multiple projects, mostly of a qualitative nature. Thus, I was interested in the notes clinicians included on difficult deliveries and their outcomes. These variables include qualitative information that can be excluded from our processed data, since we are not looking at qualitative notes on cases. We also don't need the citation information to run regressions. So we will be removing the following variables as we process our data: `VolN`, `Page`, `Number`, `Nationality_Notes`, `Maternal_Notes`, `Fetal_Notes`, `CauseofDeath`, `PreviousHistory`, and `Notes`. Further, we will exclude `Birth_Notes`, but first I will need to extract information on gestation (twin versus singleton birth).

```{r}
# Remove unnecessary variables
ML_1 <- ML_raw %>% dplyr::select(-VolN, -Page, -Number, -Nationality_Notes, -Maternal_Notes, -Fetal_Notes, -CauseofDeath, -PreviousHistory, -Notes)
```

Despite removing variables we won't use because of their qualitative nature, we still have many missing observations for some of the variables. Let's check for missing data.

```{r}
#Summarize missing data using dplyr
missing_data_summary <- ML_1 %>% dplyr::summarise_all(list(~sum(is.na(.))))
missing_data_summary
```

We can see that `CivilStatus` has 2834 missing observations and `GestationalAge_Months` has 2789 missing observations. This is a lot. Since I am not interested in understanding the relationship between marital status and infant birth weight and since gestational age in months refers to spontaneous abortions that occurred in the clinic, we can also exclude both these variables, the latter because an abortion precludes the existence of a birth. `Birth_Notes` also has 2330 missing values, but first I need to extract information on gestation (twin versus singleton birth) from this variable before I exclude it.

```{r}
# Extract information on gestation from Birth_Notes and create new variable gestation with singleton and twin births
ML_2 <- ML_1 %>%
  mutate(Birth_Notes = str_trim(Birth_Notes)) %>% # removes any leading or trailing whitespace from Birth_Notes column
  mutate(Gestation = if_else(is.na(Birth_Notes) | Birth_Notes == "", "singleton", # checks if Birth_Notes is NA or empty strings and assigns singleton to Gestation column
                             if_else(str_detect(tolower(Birth_Notes), "gemelar"), "twin", "singleton"))) # checks for gemelar in case-insensitive manner and assigns twin accordingly or singleton otherwise
ML_2

# Remove variables with missing data not relevant to hypothesis
ML_3 <- ML_2 %>% dplyr::select(-CivilStatus, -GestationalAge_Months, -Birth_Notes)
```

Now we can check for missing data again.

```{r}
#Summarize missing data using dplyr
missing_data_summary <- ML_3 %>% dplyr::summarise_all(list(~sum(is.na(.))))
missing_data_summary
```
Now, I will create a new categorical variable of Normal Birthweight (NBW) for all birth weights greater than 2500 grams and Low Birthweight (LBW) for all birth weights equal to or less than 2500 grams for a future logistic regression. This will come from the `Weightgrams` variable.

```{r}
# Create new variable of NBW and LBW for future logistic regression
ML_4 <- ML_3 %>%
  mutate(BirthweightCategory = if_else(Weightgrams <= 2500, "LBW", "NBW"))
ML_4
```

Now I will work on transforming character variables into factors.

```{r}
# Transform character variables into factors
ML_5 <- ML_4 %>%
  mutate(across(c(Color, Status, Nationality, Birth, MaternalOutcome, FetalOutcome, Sex, Gestation, BirthweightCategory), as.factor))

# Check variables
glimpse(ML_5)

# Check levels of factor variables
map(ML_5[c('Color', 'Status', 'Nationality', 'Birth', 'MaternalOutcome', 'FetalOutcome', 'Sex', 'Gestation', 'BirthweightCategory')], levels)

# Define factor variables to check frequencies
factor_variables <- c('Color', 'Status', 'Nationality', 'Birth', 'MaternalOutcome', 'FetalOutcome', 'Sex', 'Gestation', 'BirthweightCategory')

# Check frequencies of factor variables
frequency_table <- ML_5 %>%
  count(across(all_of(factor_variables)))

print(frequency_table)
```

# Create datasets for analysis

There are still missing observations for all the remaining variables except `Date`. For now, I will keep these observations intact because I want the maximum number of observations for summary statistics of all variables. Although the sample size for these summary statistics will then differ from that of my linear regression model, I believe more observations at the exploratory stage provide a fuller picture of what type of patient went to the hospital during the time period under study. Here, I will create two datasets: one for summary statistics and one for the linear regression model. In addition, most contemporary studies exclude all birthweights less than 500 grams because they have a high chance of being stillborn. I do so the same here, even if they were marked as a live birth. I will also exclude all stillbirths or neonatal deaths as the analysis is interested in studying live births. Finally, for the linear dataset I will exclude all twin births, since most current studies restrict their regression analyses to singleton births.

```{r} 
# Create dataset for summary statistics (includes missing values)
ML_summary <- ML_5

# Creating dataset for linear regression
ML_linear <- ML_5 %>% tidyr::drop_na() %>%
  filter(Weightgrams >= 500, FetalOutcome != "morto", Gestation != "twin") # Drop observations of < 500 grams, all non-live births, and all twin births for regression dataset

# Check for no missing data in linear model
ML_linear_summary <- ML_linear %>% dplyr::summarise_all(list(~sum(is.na(.))))
ML_linear_summary
```

Now, I can see that my `ML_linear` dataset has no missing data. It has 1919 observations and 12 variables. This might change as I begin analysis. For example, I might want to exclude infant birth length, which is included at the moment.

# Save data 

Finally, I will save the clean data both the `ML_Linear` dataset and the `ML_summary` dataset as RDS files.

```{r}
# Save ML_Linear as RDS
save_data_location <- here::here("data","processed-data","ML_linear_processed.rds")
saveRDS(ML_linear, file = save_data_location)

# Save ML_summary as RDS
save_data_location <- here::here("data","processed-data","ML_summary_processed.rds")
saveRDS(ML_summary, file = save_data_location)
```

# Data loading for mean birth weights table
```{r}
# path to data
# note the use of the here() package and not absolute paths
data_location <- here::here("data","raw-data","Mean_Birthweights.csv")
Mean_Birthweights <- read_csv(data_location)

# Structure of Data
glimpse(Mean_Birthweights)

# Remove median and maternal age variables given missing data
Mean_Birthweights <- Mean_Birthweights %>% dplyr::select(-Median, -`Maternal Age (mean)`, -"<2500gm (%)")

# Structure of data
glimpse(Mean_Birthweights)

# Save Mean_Birthweight as RDS
save_data_location <- here::here("data","processed-data","Mean_Birthweights_processed.rds")
saveRDS(Mean_Birthweights, file = save_data_location)
```
# Notes